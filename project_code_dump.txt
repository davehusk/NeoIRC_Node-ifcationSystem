---/index.js
const express = require('express');
const expressWs = require('express-ws');
const mongoose = require('mongoose');
const session = require('express-session');
const bcrypt = require('bcrypt');
const path = require('path');
require('dotenv').config();

const User = require('./models/User');
const Message = require('./models/Message');
const Channel = require('./models/Channel');

const app = express();
expressWs(app);
const PORT = process.env.PORT || 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false
}));

const clients = [];


mongoose.connect(process.env.MONGO_URI).then(() => {
    console.log("MongoDB connected");
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  });
  
  app.ws('/ws', async (ws, req) => {
    const { userId, username } = req.session;
    const url = new URL(req.url, `http://${req.headers.host}`);
    const channel = decodeURIComponent(url.searchParams.get("channel") || "general");
  
    if (!userId || !username) return ws.close();
  
    const user = await User.findById(userId);
    if (!user) return ws.close();
  
    user.isOnline = true;
    user.lastActive = new Date();
    await user.save();
  
    clients.push({ ws, userId, username, channel });
  
    broadcastUserStatus();
  
    ws.on('close', async () => {
      const index = clients.findIndex(c => c.ws === ws);
      if (index !== -1) clients.splice(index, 1);
  
      user.isOnline = false;
      user.lastActive = new Date();
      await user.save();
      broadcastUserStatus();
    });
  });

function broadcastUserStatus() {
  const botUser = { username: 'Neo', channel: 'system' };
  const userMap = [botUser, ...clients.map(c => ({
    username: c.username,
    channel: c.channel
  }))];

  clients.forEach(client => {
    client.ws.send(JSON.stringify({
      type: 'presence',
      users: userMap
    }));
  });
}

function requireAuth(req, res, next) {
  if (req.session.userId) return next();
  return res.redirect('/login');
}
function requireAdmin(req, res, next) {
  if (req.session.role === 'admin') return next();
  return res.status(403).send('Access denied');
}

app.get('/', async (req, res) => {
  if (req.session.userId) {
    const usersOnline = clients.map(c => ({
      username: c.username,
      channel: c.channel
    }));
    return res.render('index', {
      username: req.session.username,
      usersOnline
    });
  }
  res.render('index', { username: null, usersOnline: [] });
});

app.get('/login', (req, res) => res.render('login', { error: null }));
app.post('/login', async (req, res) => {
  const { identifier, password } = req.body;
  const user = await User.findOne({ $or: [{ email: identifier }, { username: identifier }] });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.render('login', { error: 'Invalid credentials' });
  }
  user.lastLogin = new Date();
  await user.save();
  req.session.userId = user._id;
  req.session.username = user.username;
  req.session.role = user.role;
  res.redirect('/dashboard');
});

app.get('/signup', (req, res) => res.render('signup', { error: null }));
app.post('/signup', async (req, res) => {
  const { email, username, password } = req.body;
  const exists = await User.findOne({ $or: [{ email }, { username }] });
  if (exists) return res.render('signup', { error: 'Email or username exists' });
  const hash = await bcrypt.hash(password, 10);
  const newUser = new User({ email, username, password: hash, role: username === 'admin' ? 'admin' : 'user' });
  await newUser.save();
  req.session.userId = newUser._id;
  req.session.username = newUser.username;
  req.session.role = newUser.role;
  res.redirect('/dashboard');
});

app.post('/logout', async (req, res) => {
  const u = await User.findById(req.session.userId);
  if (u) {
    u.isOnline = false;
    u.lastActive = new Date();
    await u.save();
  }
  req.session.destroy(() => res.redirect('/'));
});

app.get('/dashboard', requireAuth, async (req, res) => {
  const currentChannel = req.query.channel || req.session.lastChannel || 'general';
  req.session.lastChannel = currentChannel;

  const onlineClients = clients.map(c => ({ username: c.username, channel: c.channel }));
  const users = await User.find({ username: { $ne: req.session.username } }).lean();

  users.forEach(u => {
    const match = onlineClients.find(c => c.username === u.username);
    u.isOnline = !!match;
    u.currentChannel = match?.channel || null;
  });

  const messages = await Message.find({
    channel: currentChannel,
    $or: [
      { isPrivate: false },
      { isPrivate: true, $or: [{ sender: req.session.username }, { to: req.session.username }] }
    ]
  }).sort({ timestamp: 1 });

  res.render('dashboard', {
    username: req.session.username,
    isAdmin: req.session.role === 'admin',
    currentChannel,
    users,
    messages,
    replyTo: req.query.replyTo || null
  });
});

app.get('/dm/:target', requireAuth, async (req, res) => {
  const targetUser = await User.findOne({ username: req.params.target });
  if (!targetUser) return res.status(404).send("User not found");

  const messages = await Message.find({
    isPrivate: true,
    $or: [
      { sender: req.session.username, to: req.params.target },
      { sender: req.params.target, to: req.session.username }
    ]
  }).sort({ timestamp: 1 });

  res.render('dashboard', {
    username: req.session.username,
    isAdmin: req.session.role === 'admin',
    currentChannel: 'general',
    users: await User.find({ username: { $ne: req.session.username } }).lean(),
    messages,
    replyTo: req.params.target
  });
});

app.get('/profile', requireAuth, async (req, res) => {
  const profileUser = await User.findById(req.session.userId);
  res.render('profile', {
    profileUser,
    canEdit: true,
    isAdmin: req.session.role === 'admin',
    username: req.session.username
  });
});

app.get('/profile/:username', requireAuth, async (req, res) => {
    const { username } = req.params;
  
    if (username === 'Neo') {
      const neoProfile = {
        username: 'Neo',
        email: 'ai@neoirc.local',
        role: 'bot',
        lastLogin: new Date(),
        lastActive: new Date(),
        bio: "I’m Neo, your real-time system assistant. I live in #system, monitor all channels, and love answering questions. Mention my name, and I’ll reply. Soon, I’ll become sentient. 😉"
      };
  
      return res.render('profile', {
        profileUser: neoProfile,
        canEdit: false,
        isAdmin: req.session.role === 'admin',
        username: req.session.username
      });
    }
  
    const profileUser = await User.findOne({ username });
    const canEdit = username === req.session.username;
    if (!profileUser) return res.status(404).send('User not found.');
    res.render('profile', {
      profileUser,
      canEdit,
      isAdmin: req.session.role === 'admin',
      username: req.session.username
    });
  });
  

app.post('/profile/update', requireAuth, async (req, res) => {
  const user = await User.findById(req.session.userId);
  if (!user) return res.status(404).send('User not found');
  user.email = req.body.email;
  if (req.body.password) {
    user.password = await bcrypt.hash(req.body.password, 10);
  }
  user.bio = req.body.bio || '';
  await user.save();
  res.redirect('/profile');
});

app.get('/announcements', requireAuth, async (req, res) => {
  const announcements = await Message.find({ isAnnouncement: true }).sort({ timestamp: -1 }).limit(50);
  res.render('announcements', {
    announcements,
    isAdmin: req.session.role === 'admin',
    username: req.session.username
  });
});

app.post('/announcements/delete', requireAuth, requireAdmin, async (req, res) => {
  await Message.findByIdAndDelete(req.body.id);
  res.redirect('/admin');
});

app.get('/admin', requireAuth, requireAdmin, async (req, res) => {
  const users = await User.find().lean();
  const announcements = await Message.find({ isAnnouncement: true }).sort({ timestamp: -1 });
  const onlineClients = clients.map(c => ({ username: c.username, channel: c.channel }));
  users.forEach(u => {
    const match = onlineClients.find(c => c.username === u.username);
    u.isOnline = !!match;
    u.currentChannel = match?.channel || null;
  });
  res.render('admin', {
    users,
    announcements,
    isAdmin: req.session.role === 'admin',
    username: req.session.username
  });
});

app.post('/send', requireAuth, async (req, res) => {
  const { message, to, fromAdmin, channel } = req.body;
  const sender = fromAdmin ? '📢 SYSTEM' : req.session.username;
  const isAnnouncement = !!fromAdmin;
  const isPrivate = !!to;
  const targetChannel = channel || (fromAdmin ? 'system' : 'general');

  const msg = new Message({
    sender,
    content: message,
    timestamp: new Date(),
    isPrivate,
    to: to || null,
    isAnnouncement,
    channel: targetChannel
  });

  await msg.save();

  const payload = {
    sender,
    content: message,
    timestamp: msg.timestamp.toLocaleString(),
    to: to || null,
    isAnnouncement,
    channel: targetChannel
  };

  clients.forEach(client => {
    const matchPrivate = !to || client.username === sender || client.username === to;
    const matchChannel = client.channel === targetChannel;

    if (isAnnouncement || (isPrivate && matchPrivate) || (!isPrivate && matchChannel)) {
      client.ws.send(JSON.stringify(payload));
    }
  });

  if (!isPrivate && message.toLowerCase().includes("neo")) {
    const reply = new Message({
      sender: 'Neo',
      content: "I'm here. Ask me anything.",
      timestamp: new Date(),
      isPrivate: false,
      channel: targetChannel
    });
    await reply.save();

    const botReply = {
      sender: 'Neo',
      content: reply.content,
      timestamp: reply.timestamp.toLocaleString(),
      isAnnouncement: false,
      channel: targetChannel
    };

    clients.forEach(client => {
      if (client.channel === targetChannel) {
        client.ws.send(JSON.stringify(botReply));
      }
    });
  }

  res.send(payload);
});

app.post('/messages/clear', requireAuth, requireAdmin, async (req, res) => {
  const { channel } = req.body;
  if (!channel) return res.status(400).send("Channel required");

  await Message.deleteMany({
    channel,
    isAnnouncement: { $ne: true }
  });

  res.sendStatus(200);
});

app.get('/channels', requireAuth, async (req, res) => {
  let channels = await Channel.find({});
  if (!channels.find(c => c.name === 'general')) {
    channels.unshift({ name: 'general', description: 'Default global chat', createdBy: 'SYSTEM' });
  }
  res.render('channels', {
    channels,
    isAdmin: req.session.role === 'admin',
    username: req.session.username
  });
});

app.post('/channels/create', requireAuth, async (req, res) => {
  let { name, description } = req.body;
  name = name?.trim().toLowerCase().replace(/\s+/g, '-');
  description = description?.trim() || '';
  if (!name || name === 'general') return res.status(400).send("Invalid or reserved name");

  const exists = await Channel.findOne({ name });
  if (exists) return res.status(400).send("Channel exists");

  await Channel.create({ name, description, createdBy: req.session.username });
  res.redirect('/channels');
});

app.post('/channels/delete', requireAuth, requireAdmin, async (req, res) => {
  const { name } = req.body;
  await Channel.deleteOne({ name });
  await Message.deleteMany({ channel: name });
  res.redirect('/channels');
});

app.post('/channels/update', requireAuth, requireAdmin, async (req, res) => {
  const { name, newName, description } = req.body;
  await Channel.updateOne({ name }, { name: newName, description });
  res.redirect('/channels');
});

---

---/seed.js
// seed.js
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const User = require('./models/User');
const Message = require('./models/Message');
const Channel = require('./models/Channel');

async function seed() {
    await mongoose.connect(process.env.MONGO_URI);

    const exists = await User.findOne({ username: 'admin' });
    if (!exists) {
        const admin = new User({
            email: 'admin@neoirc.local',
            username: 'admin',
            password: await bcrypt.hash('adminpass', 10),
            role: 'admin',
            isOnline: false
        });
        await admin.save();

        await Channel.create({ name: 'general', description: 'Default global chat', createdBy: 'admin' });

        await Message.create({
            sender: '📢 SYSTEM',
            content: 'Welcome to Neo IRC!',
            isAnnouncement: true,
            channel: 'general'
        });

        console.log("✅ Default data seeded.");
    } else {
        console.log("⚠️ Admin already exists. Skipping seed.");
    }

    process.exit();
}

seed();

---

---/models/Channel.js
const mongoose = require('mongoose');

const channelSchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true },
    description: String,
    createdBy: String,
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Channel', channelSchema);

---

---/models/Message.js
const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema({
    sender: String,
    content: String,
    timestamp: { type: Date, default: Date.now },
    to: String,
    isPrivate: { type: Boolean, default: false },
    isAnnouncement: { type: Boolean, default: false },
    channel: { type: String, default: 'general' }
});

module.exports = mongoose.model('Message', messageSchema);

---

---/models/Notification.js
const mongoose = require('mongoose');

const notificationSchema = new mongoose.Schema({
    username: { type: String, required: true },
    message: { type: String, required: true },
    timestamp: { type: Date, default: Date.now },
    isAdmin: { type: Boolean, default: false }
});

module.exports = mongoose.model('Notification', notificationSchema);

---

---/models/PrivateMessage.js
const mongoose = require('mongoose');

const privateMessageSchema = new mongoose.Schema({
    from: { type: String, required: true },
    to: { type: String, required: true },
    content: { type: String, required: true },
    timestamp: { type: Date, default: Date.now }
});

module.exports = mongoose.model('PrivateMessage', privateMessageSchema);

---

---/models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['admin', 'voiced', 'user'], default: 'user' },
  isOnline: { type: Boolean, default: false },
  lastActive: { type: Date, default: Date.now },
  lastLogin: { type: Date },
  bio: { type: String, default: '' } // ✅ Added
});

module.exports = mongoose.model('User', userSchema);

---

---/public/frontend.js
let currentChannel = document.getElementById("channel-name")?.value || 'general';
let ws;

const form = document.getElementById("chat-form");
const messageInput = document.getElementById("message-input");
const toUserInput = document.getElementById("to-user");

const chatStream = document.getElementById("chat-stream");
const userList = document.getElementById("user-list");

function scrollToBottom() {
  const activeStream = document.querySelector(".chat-stream");
  if (activeStream) activeStream.scrollTop = activeStream.scrollHeight;
}

function appendMessage(streamId, html, key) {
  const stream = document.getElementById(streamId);
  if (!stream || stream.querySelector(`[data-id="${key}"]`)) return;
  const div = document.createElement("div");
  div.innerHTML = html;
  div.dataset.id = key;
  stream.appendChild(div);
  scrollToBottom();
}

function handleWebSocketMessage(event) {
  const data = JSON.parse(event.data);
  if (data.type === 'presence' && userList) {
    userList.innerHTML = '';
    data.users.forEach(user => {
      const li = document.createElement("li");
      li.className = "user-entry";
      li.dataset.username = user.username;
      li.innerHTML = `
        <a href="/profile/${user.username}" class="mention-name">@${user.username}</a>
        <span class="online">●</span>
        <small>#${user.channel}</small>
      `;
      userList.appendChild(li);
    });

    document.querySelectorAll('.mention-name').forEach(el => {
      el.addEventListener("click", () => {
        if (toUserInput) {
          toUserInput.value = el.textContent.replace('@', '');
          messageInput.focus();
        }
      });
    });

    return;
  }

  const timestampKey = data.timestamp.replace(/\W/g, '');
  const key = `${data.sender}-${timestampKey}`;
  const isOwn = data.sender === window.currentUser;
  const userClass = `user-${data.sender.toLowerCase()}`;
  const ownClass = isOwn ? 'own-msg' : '';
  const botClass = data.sender === 'Neo' ? 'neo-msg' : '';
  const timestampTitle = `title="${data.timestamp}"`;

  const avatarIcon = data.sender === 'Neo' ? '🤖' : '👤';
  const html = `
    <div class="chat-msg ${userClass} ${ownClass} ${botClass}" data-id="${key}">
      <div class="msg-avatar">${avatarIcon}</div>
      <div class="msg-content">
        <span class="mention-name" ${timestampTitle}>${data.sender}</span>
        <span class="timestamp" ${timestampTitle}>${data.timestamp}</span><br>
        <span>${data.content}</span>
      </div>
    </div>
  `;

  appendMessage("chat-stream", html, key);
}

function connectWebSocket(channel) {
  ws = new WebSocket(`ws://${window.location.host}/ws?channel=${encodeURIComponent(channel)}`);
  ws.addEventListener("open", () => console.log("🔌 Connected to", channel));
  ws.addEventListener("message", handleWebSocketMessage);
}

if (form) {
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const message = messageInput.value.trim();
        if (!message) return;
      
        const to = toUserInput?.value.trim();
      
        await fetch("/send", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ message, to, channel: currentChannel })
        });
      
        messageInput.value = "";
      });

  messageInput.addEventListener("keydown", e => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      form.dispatchEvent(new Event('submit'));
    }
  });
}

document.querySelectorAll('.mention-name').forEach(name => {
  name.addEventListener("click", () => {
    toUserInput.value = name.textContent.replace('@', '');
    messageInput.focus();
  });
});

connectWebSocket(currentChannel);

---

---/views/admin.ejs
<!DOCTYPE html>
<html>
<head>
  <title>🛠️ Admin Panel | Neo IRC</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
<%- include('partials/_header') %>

<main class="main-content admin-page">
  <h2>🛠️ Admin Control Center</h2>

  <section class="admin-grid">
    <div class="admin-tile full-width">
      <h3>📢 Send Global Announcement</h3>
      <form id="admin-message-form">
        <textarea id="admin-announcement" name="message" required placeholder="Broadcast something important..."></textarea>
        <input type="hidden" name="fromAdmin" value="true">
        <button type="submit">📡 Broadcast</button>
      </form>
    </div>

    <div class="admin-tile">
      <h3>📋 User Status</h3>
      <ul class="user-list-stats">
        <% users.forEach(u => { %>
          <li class="user-card">
            <strong><a href="/profile/<%= u.username %>"><%= u.username %></a></strong>
            <span class="badge role-<%= u.role %>"><%= u.role %></span>
            <% if (u.isOnline) { %>
              <span class="online">🟢 Online in #<%= u.currentChannel || 'general' %></span>
            <% } else { %>
              <span class="offline">⚫ Last seen <%= new Date(u.lastActive).toLocaleString() %></span>
            <% } %>
          </li>
        <% }) %>
      </ul>
    </div>

    <div class="admin-tile">
      <h3>📜 Recent Broadcasts</h3>
      <div id="announcement-wrapper">
        <% announcements.slice(0, 5).forEach(msg => {
          const isNew = (new Date() - new Date(msg.timestamp)) < 300000;
        %>
          <div class="announcement">
            <strong>📢 <%= msg.sender %></strong>
            <% if (isNew) { %>
              <span class="new-tag">🆕</span>
            <% } %>
            <span class="timestamp"><%= new Date(msg.timestamp).toLocaleString() %></span><br>
            <span><%= msg.content %></span>
            <form method="POST" action="/announcements/delete" style="display:inline;">
              <input type="hidden" name="id" value="<%= msg._id %>">
              <button type="submit" class="delete-btn" onclick="return confirm('Delete this announcement?')">🗑️</button>
            </form>
          </div>
        <% }) %>
      </div>
    </div>
  </section>
</main>

<script>
  document.getElementById("admin-message-form").addEventListener("submit", async (e) => {
    e.preventDefault();
    const message = document.getElementById("admin-announcement").value;
    const res = await fetch("/send", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ message, fromAdmin: true })
    });
    const data = await res.json();
    e.target.reset();

    const wrapper = document.getElementById("announcement-wrapper");
    const div = document.createElement("div");
    div.className = "announcement pulse";
    div.innerHTML = `
      <strong>📢 ${data.sender}</strong>
      <span class="new-tag">🆕</span>
      <span class="timestamp">${data.timestamp}</span><br>
      <span>${data.content}</span>
    `;
    wrapper.prepend(div);
  });
</script>
</body>
</html>

---

---/views/announcements.ejs
<!DOCTYPE html>
<html>
<head>
    <title>📢 Global Announcements</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
<%- include('partials/_header') %>

<main class="main-content">
    <h2>📡 Global Announcements Archive</h2>

    <% if (announcements.length === 0) { %>
        <p>No announcements yet.</p>
    <% } else { %>
        <% announcements.forEach(msg => { %>
            <div class="announcement">
                <strong>📢 <%= msg.sender %></strong>
                <span class="timestamp">[<%= new Date(msg.timestamp).toLocaleString() %>]</span><br>
                <span><%= msg.content %></span><br>
                <a class="announcement-reply" href="/dashboard?channel=general&replyTo=admin">💬 Reply</a>
            </div>
        <% }) %>
    <% } %>
</main>
</body>
</html>

---

---/views/channels.ejs
<!DOCTYPE html>
<html>
<head>
  <title>📡 Channels | Neo IRC</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
<%- include('partials/_header') %>

<main class="main-content channel-page">
  <h2>📡 Channel Control Center</h2>

  <section class="admin-section">
    <h3>🛰️ Available Channels</h3>
    <ul class="channel-list">
      <% channels.forEach(c => { %>
        <li class="channel-entry">
          <div class="channel-meta">
            <a href="/dashboard?channel=<%= c.name %>">#<%= c.name %></a>
            <span class="channel-desc"><%= c.description || 'No description' %></span>
            <small><%= c.name === 'general' ? '🛸 Built-in' : '🧪 User-created' %></small>
          </div>
          <% if (isAdmin) { %>
            <form method="POST" action="/channels/delete" class="channel-delete-form" onsubmit="return confirm('Are you sure you want to delete this channel?')">
              <input type="hidden" name="name" value="<%= c.name %>">
              <button type="submit">🗑️ Delete</button>
            </form>
          <% } %>
        </li>
      <% }) %>
    </ul>
  </section>

  <section class="admin-section">
    <h3>➕ Create New Channel</h3>
    <form method="POST" action="/channels/create" class="create-channel-form">
      <input type="text" name="name" placeholder="#channel-name" required>
      <input type="text" name="description" placeholder="Optional description...">
      <button type="submit">➕ Create</button>
    </form>
  </section>
</main>
</body>
</html>

---

---/views/dashboard.ejs
<!DOCTYPE html>
<html>
<head>
  <title>Neo IRC — #<%= currentChannel %></title>
  <link rel="stylesheet" href="/styles.css">
  <script>
    window.currentUser = "<%= username %>";
  </script>
</head>
<body>
  <%- include('partials/_header') %>

  <main class="main-content">
    <h2>🧠 <%= username %> in #<%= currentChannel %></h2>

    <div class="chat-layout">
      <!-- 👥 User Sidebar -->
      <aside class="user-list">
        <h3>🧬 Users</h3>
        <ul id="user-list">
          <% users.forEach(user => { %>
            <li class="user-entry">
              <a class="mention-name" href="/profile/<%= user.username %>">@<%= user.username %></a>
              <% if (user.isOnline) { %>
                <span class="online">●</span>
                <small>#<%= user.currentChannel || 'general' %></small>
              <% } else { %>
                <span class="offline">○</span>
              <% } %>
            </li>
          <% }) %>
        </ul>
      </aside>

      <!-- 💬 Chat Area -->
      <section class="chat-box">
        <div id="chat-stream" class="chat-stream">
          <% messages.forEach(msg => {
            const isPrivate = msg.isPrivate;
            const isNeo = msg.sender === 'Neo';
            const isOwn = msg.sender === username;
            const userClass = `user-${msg.sender.toLowerCase()}`;
            const ownClass = isOwn ? 'own-msg' : '';
            const botClass = isNeo ? 'neo-msg' : '';
            const avatarIcon = isNeo ? '🤖' : '👤';
          %>
          <div class="chat-msg <%= userClass %> <%= ownClass %> <%= botClass %>">
            <div class="msg-avatar"><%= avatarIcon %></div>
            <div class="msg-content">
              <span class="mention-name" title="<%= new Date(msg.timestamp).toLocaleString() %>">@<%= msg.sender %></span>
              <span class="timestamp"><%= new Date(msg.timestamp).toLocaleString() %></span><br>
              <% if (msg.isPrivate) { %>
                <em>[Private to <%= msg.to %>]</em><br>
              <% } %>
              <%= msg.content %>
            </div>
          </div>
          <% }) %>
        </div>

        <!-- 📝 Chat Input -->
        <form id="chat-form">
          <input type="text" id="message-input" name="message" placeholder="✍️ Type a message..." required />
          <input type="hidden" id="to-user" name="to" />
          <input type="hidden" id="channel-name" name="channel" value="<%= currentChannel %>" />
          <button type="submit">🚀 Send</button>
        </form>
      </section>
    </div>
  </main>

  <script src="/frontend.js"></script>
  <script>
    messageInput?.addEventListener("keydown", function (e) {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        form?.dispatchEvent(new Event("submit"));
      }
    });
  </script>
  
</body>
</html>

---

---/views/index.ejs
<!DOCTYPE html>
<html>
<head>
  <title>Neo IRC — Home</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
<main class="main-content form-page">
  <section class="form-container">
    <h1>🌌 Welcome to Neo IRC</h1>
    <p class="subtitle">The last chat system you'll ever need.</p>

    <div class="login-options">
      <a href="/login"><button>🔐 Login</button></a>
      <a href="/signup"><button>🆕 Sign Up</button></a>
    </div>

    <p class="subtle-link">2025 — Crafted by David Husk</p>
  </section>

  <section class="user-stats-panel">
    <h3>🟢 Users Online</h3>
    <ul class="user-list-stats">
      <li>🤖 <a href='/profile/Neo'>Neo</a> — <small>#system</small></li>
      <% usersOnline?.forEach(u => { %>
        <li>🧬 <a href="/profile/<%= u.username %>"><%= u.username %></a> — <small>#<%= u.channel %></small></li>
      <% }) %>
    </ul>
  </section>
</main>
</body>
</html>

---

---/views/login.ejs
<!DOCTYPE html>
<html>
<head>
  <title>🔐 Login | Neo IRC</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
<main class="main-content form-page">
  <section class="form-container">
    <h1>🔐 Welcome Back</h1>
    <% if (error) { %><p class="error"><%= error %></p><% } %>
    <form method="POST" action="/login">
      <input type="text" name="identifier" placeholder="Username or Email" required>
      <input type="password" name="password" placeholder="Password" required>
      <button type="submit">🚀 Enter Console</button>
    </form>
    <p class="subtle-link">Need an account? <a href="/signup">Create one</a></p>
  </section>
</main>
</body>
</html>

---

---/views/profile.ejs
<!DOCTYPE html>
<html>
<head>
  <title>👤 <%= profileUser.username %>'s Profile</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
<%- include('partials/_header') %>

<main class="main-content profile-layout">
  <!-- 🧬 Avatar + Info -->
  <section class="profile-left">
    <div class="profile-card">
      <div class="avatar-badge">
        <div class="avatar-icon">👤</div>
        <h2><%= profileUser.username %></h2>
        <span class="badge role-<%= profileUser.role %>"><%= profileUser.role %></span>
      </div>
      <% if (canEdit) { %>
        <form method="POST" action="/profile/update">
          <label>Email:</label>
          <input type="email" name="email" value="<%= profileUser.email %>" required><br>
          <label>New Password:</label>
          <input type="password" name="password" placeholder="Leave blank"><br>
          <label>Bio:</label>
          <textarea name="bio" rows="3" placeholder="Tell us about yourself..."><%= profileUser.bio || '' %></textarea><br>
          <button type="submit">💾 Save</button>
        </form>
      <% } else { %>
        <p><strong>Email:</strong> <%= profileUser.email %></p>
        <p><strong>Bio:</strong> <%= profileUser.bio || 'No bio provided.' %></p>
      <% } %>
    </div>
  </section>

  <!-- 📜 Activity Log -->
  <section class="profile-right">
    <div class="activity-log">
      <h3>📜 Activity</h3>
      <p><strong>Last Login:</strong> <%= new Date(profileUser.lastLogin).toLocaleString() %></p>
      <p><strong>Last Active:</strong> <%= new Date(profileUser.lastActive).toLocaleString() %></p>
    </div>
  </section>
</main>
</body>
</html>

---

---/views/signup.ejs
<!DOCTYPE html>
<html>
<head>
  <title>🧬 Sign Up | Neo IRC</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
<main class="main-content form-page">
  <section class="form-container">
    <h1>🧬 Create Your Node</h1>
    <% if (error) { %><p class="error"><%= error %></p><% } %>
    <form method="POST" action="/signup">
      <input type="email" name="email" placeholder="Email" required>
      <input type="text" name="username" placeholder="Username" required>
      <input type="password" name="password" placeholder="Password" required>
      <button type="submit">🌌 Register</button>
    </form>
    <p class="subtle-link">Already connected? <a href="/login">Login</a></p>
  </section>
</main>
</body>
</html>

---

---/views/partials/_header.ejs
<header class="main-header">
  <nav class="toolbar unified-header">
    <div class="toolbar-left">
      <a href="/dashboard">🏠 Dashboard</a>
      <a href="/profile">👤 Profile</a>
      <a href="/channels">📡 Channels</a>
      <% if (isAdmin) { %>
        <a href="/admin">🛠️ Admin</a>
      <% } %>
    </div>
    <div class="toolbar-right">
      <% if (username) { %>
        <span class="user-badge">🧠 <%= username %></span>
        <form action="/logout" method="POST" style="display: inline;">
          <button type="submit">⏏️ Logout</button>
        </form>
      <% } %>
    </div>
  </nav>
</header>

---

